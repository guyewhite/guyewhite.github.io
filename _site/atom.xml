<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>gelvinwhite</title>
 <link href="gelvinwhite.com/atom.xml" rel="self"/>
 <link href="gelvinwhite.com/"/>
 <updated>2022-10-18T11:33:55-07:00</updated>
 <id>gelvinwhite.com</id>
 <author>
   <name>G. Elvin White</name>
   <email></email>
 </author>

 
 <entry>
   <title>How to Create a Kontakt 7 Instrument (Part 4) - Midi Scale</title>
   <link href="gelvinwhite.com/kontakt/2022/10/14/how-to-create-a-kontakt-7-instrument-part-4/"/>
   <updated>2022-10-14T16:00:00-07:00</updated>
   <id>gelvinwhite.com/kontakt/2022/10/14/how-to-create-a-kontakt-7-instrument-part-4</id>
   <content type="html">&lt;p&gt;Welcome to the fourth installment of my multi-part series about how to engage in the beautiful pursuit of building your own instruments, effects, and plugins in the Kontakt Script Processor (KSP).&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial continues from the &lt;a href=&quot;https://gelvinwhite.com/kontakt/2022/10/02/how-to-create-a-kontakt-7-instrument-part-3/&quot;&gt;third installment&lt;/a&gt; of this multi-part series. So, if you have not followed the instructions in our previous installments, best to backtrack and complete those steps. Further, this tutorial requires a full version of Kontakt. Likely, Kontakt 5 or later is fine. However, screenshots in this tutorial are of Kontakt 7.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Continuing from where we left off, please ensure that the following starter code is in place in the scripting window:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to off }
  declare ui_switch $run
  $run := 0
  message(&quot;Ready to run&quot;)

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

  {set initial instrument state value}
  declare @state
  @state := &quot;A&quot;

end on

{creates a function that resets the values of run}
function resetRun()

  $run := 0
  message(&quot;Ready to run&quot;)

end function

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;Running &quot; &amp;amp; @state)
  else
    message(&quot;Ready to run&quot;)
  end if
end on

{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;A&quot;

end on

{this runs when the ui_control called $option2 is changed}
on ui_control ($option2)

  $option2 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;B&quot;

end on

{this runs when the ui_control called $option3 is changed}
on ui_control ($option3)

  $option3 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option2 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;C&quot;

end on
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure that the script functions by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;. Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; followed by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Running C&lt;/code&gt; appearing in the status bar / console at the bottom of the screen.&lt;/p&gt;

&lt;h3 id=&quot;step-one---building-scales&quot;&gt;Step One - Building Scales&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Generally speaking, &lt;em&gt;arrays&lt;/em&gt; are contiguous, back-to-back areas of memory where a series of numbers, letters, or other data types are stored.&lt;/li&gt;
  &lt;li&gt;KSP offers array types for integers, real numbers, and strings.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For example, consider the following &lt;em&gt;integer array&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this is an integer array}
declare %myArray[4] := (0,1,2,3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declare&lt;/code&gt; statement creates an array of type integer, signified by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; symbol. The number of elements allowed in this array is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;. Then, the values for each of those four locations are assigned. So, the &lt;em&gt;zeroth&lt;/em&gt; spot contains the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myArray&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (the second location of the array) contains an integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myArray&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; (the third location of the array) contains an integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;. The last location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myArray&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myArray&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, which contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays are &lt;em&gt;zero-indexed&lt;/em&gt; in that we start counting the locations in the array starting at zero. This comports with most programming languages that count starting at zero. For example, consider this second array:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this is another integer array}
declare %myOtherArray[3] := (52,65,44)
message(%myOtherArray[0])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myOtherArray&lt;/code&gt; can hold three integers. The first location, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%myOtherArray[0]&lt;/code&gt; holds the integer value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;52&lt;/code&gt;. This code will &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; that a value to the console. What would happen if you modified your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; statement to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message(%myOtherArray[2])&lt;/code&gt;? If you guessed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;44&lt;/code&gt; would be displayed in the console, you are correct!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays are very useful for holding collections of values. For example, let’s add the following to the bottom of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; function in your starter code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{c major scale in midi notes}
declare %cMajorScale[8] := (60,62,64,65,67,69,71,72)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that this array of integers has eight locations where one could store values. Then, eight values are assigned to these positions. The zeroth value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt;. The last value in the array is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;72&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Midi notes are assigned specific integer values by industry standards. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; is designated as a middle C (C3). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;62&lt;/code&gt; is designated as the D above middle C (D3). Accordingly, the array you just added to your code essentially holds the values of the C major scale. You can obtain a midi note chart simply by Googling “midi note chart”.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under the code you just added, also add the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declare $count := 0&lt;/code&gt; as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{c major scale in midi notes}
declare %cMajorScale[8] := (60,62,64,65,67,69,71,72)
declare $count := 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;We will be using this additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; variable in the step to come.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;After adding the above code to the end of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; function, hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;. Provided that no errors appear and your program functions as it did before, you have added it correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-two---looping-with-while&quot;&gt;Step Two - Looping with While&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loops will repeat a block of code as long as a condition is true. For example, consider the following code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this loop will repeat while count is less than 8}
while ($count &amp;lt; 7)
  {message the count to the console}
  message($count)

  {wait 1000000 microseconds or 1 second}
  wait(1000000)

  {increment the count by 1}
  inc ($count)
end while
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that this will loop as long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; is less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;. First, the loop messages the current count. Then, we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1000000&lt;/code&gt; microseconds. Then, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; is increased by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. The loop will then repeat over and over again until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; is no longer less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can effectively create a function within our script that loops through each note of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cMajorScale&lt;/code&gt; array. Add the following code immediately below the end &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; callback.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function play()

  while ($count &amp;lt; 7)
    message(&quot;Note # &quot; &amp;amp; %cMajorScale[$count])
    play_note(%cMajorScale[$count],127,0,2000000)
    wait(2000000)
    inc ($count)
  end while

  $count := 0

end function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice how this function, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt;, will first enter a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loop&lt;/code&gt; will check to see if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; is less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;. If so, it will message the console the current note being played in midi notation. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cMajorScale[0]&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; this will cause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; to appear in the console. Then, the next line of code engages the midi engine to play a note. In this initial case, it plays note &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; or C3. It plays it at velocity &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; sample offset (more on that later), for length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2000000&lt;/code&gt; microseconds or 2 seconds. Then, the script engine waits for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2000000&lt;/code&gt; microseconds or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; seconds. Finally, the count is increased. Next time through the loop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cMajorScale[1]&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;62&lt;/code&gt; is played. This is a D3 note. This repeats until the scale is done. In the end, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; is reset to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we need to tell the script processor to run this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; function when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; button is pressed. Accordingly, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control($run)&lt;/code&gt; callback, modify its contents to be the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this runs when the ui_control called $run is changed}
on ui_control($run)

  call play()

  {always set the run button back to its original state}
  $run := 0
end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that this function simply executes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; callback. Then, it resets itself to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;off&lt;/code&gt; position.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Your program is ready to run some midi to your DAW!&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a final check, your final code should appear as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to off }
  declare ui_switch $run
  $run := 0
  message(&quot;Ready to run&quot;)

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

  {set initial instrument state value}
  declare @state
  @state := &quot;A&quot;

  {c major scale in midi notes}
  declare %cMajorScale[8] := (60,62,64,65,67,69,71,72)
  declare $count := 0

end on

{creates a function that resets the values of run}
function resetRun()

  $run := 0
  message(&quot;Ready to run&quot;)

end function

function play()

  while ($count &amp;lt; 8)
    message(&quot;Note # &quot; &amp;amp; %cMajorScale[$count])
    play_note(%cMajorScale[$count],127,0,2000000)
    wait(2000000)
    inc ($count)
  end while

  $count := 0

end function

{this runs when the ui_control called $run is changed}
on ui_control($run)

  call play()

  {always set the run button back to its original state}
  $run := 0
end on

{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;A&quot;

end on

{this runs when the ui_control called $option2 is changed}
on ui_control ($option2)

  $option2 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;B&quot;

end on

{this runs when the ui_control called $option3 is changed}
on ui_control ($option3)

  $option3 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option2 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;C&quot;

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-three---overcoming-the-curses-of-midi-routing&quot;&gt;Step Three - Overcoming the Curses of Midi Routing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ironically, despite the complications that are inherent in coding, simply getting one’s DAW to recognize the MIDI data emerging from Kontakt can be the most challenging aspect of this slice of our larger project.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kontakt’s side of things is exceptionally easy. You’ll want to head to the gear &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; icon at the top of Kontakt and navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Engine&lt;/code&gt;. There, you will want to modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Send MIDI to outside world&lt;/code&gt; to include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Script generated notes&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script generated CCs&lt;/code&gt;. Your options should appear as follows:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-15-how-to-create-a-kontakt-7-instrument-part-4/001.png&quot; alt=&quot;kontakt panel with script generated notes selected&quot; title=&quot;kontakt panel&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additionally, I find it helpful in some situations to ensure that the MIDI channel of your Kontakt instrument is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Omni&lt;/code&gt; as follows:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-15-how-to-create-a-kontakt-7-instrument-part-4/002.png&quot; alt=&quot;kontakt panel with omni midi selected&quot; title=&quot;kontakt midi settings&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Within your DAW of choice, getting the DAW to recognize the midi data and route it properly involves specific settings.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Within Ableton Live, this is relatively easy. First, load Kontakt with your script onto a MIDI track. Second, load a MIDI instrument of your choosing into a second track. Finally, modify the track routing as follows:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-15-how-to-create-a-kontakt-7-instrument-part-4/003.png&quot; alt=&quot;two ableton live tracks set to record monitoring midi&quot; title=&quot;ableton live tracks&quot; /&gt;
Notice that the left-hand track, which is currently assigned Kontakt with our script loaded, is set to monitor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All Ins&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monitor&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;In&lt;/code&gt;. The right-hand track, assigned to a midi instrument of our choosing (I try to use a simple piano for development), is set to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIDI From&lt;/code&gt; our first track. Both the top and bottom dropdowns are set to monitor the first track. Finally, and most importantly, in Ableton Live, both tracks are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record enabled&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a Logic user, you will need to run Kontakt in the stand-alone application. With the stand-alone application running, with your script copied in, you will go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options &amp;gt; MIDI &amp;gt; Outputs&lt;/code&gt; and ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kontakt X Virtual Instrument&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;. Once you have a virtual instrument loaded within Logic, it will &lt;em&gt;likely&lt;/em&gt; play the resulting MIDI.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-15-how-to-create-a-kontakt-7-instrument-part-4/004.png&quot; alt=&quot;kontakt panel with midi options selected&quot; title=&quot;kontakt midi settings&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h3&gt;

&lt;p&gt;You have now worked with MIDI for the first time in your project. In our next iteration of this series, we will be adding further possibilities for midi generation.&lt;/p&gt;

&lt;p&gt;Copyright © 2022 THI. All rights reserved. gelvinwhite.com is operated by THI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Native Instruments®️ and Kontakt®️ are registered trademarks of Native Instruments GmbH. We have no affiliation with Native Instruments.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Create a Kontakt 7 Instrument (Part 3) - Switcheroo</title>
   <link href="gelvinwhite.com/kontakt/2022/10/02/how-to-create-a-kontakt-7-instrument-part-3/"/>
   <updated>2022-10-02T16:00:00-07:00</updated>
   <id>gelvinwhite.com/kontakt/2022/10/02/how-to-create-a-kontakt-7-instrument-part-3</id>
   <content type="html">&lt;p&gt;Welcome to the third installment of my multi-part series about how to engage in the beautiful pursuit of building your own instruments, effects, and plugins in the Kontakt Script Processor (KSP).&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial continues from the &lt;a href=&quot;https://gelvinwhite.com/kontakt/2022/10/01/how-to-create-a-kontakt-7-instrument-part-2/&quot;&gt;second installment&lt;/a&gt; of this multi-part series. So, if you have not followed the instructions in our previous installments, best to backtrack and complete those steps. Further, this tutorial requires a full version of Kontakt. Likely, Kontakt 5 or later is fine. However, screenshots in this tutorial are of Kontakt 7.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Continuing from where we left off, please ensure that the following starter code is in place in the scripting window:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $switch that is tied to a button. Set that switch to on }
  declare ui_switch $switch
  $switch := 1

end on

{this runs when the ui_control called $switch is changed}
on ui_control($switch)

  if($switch = 1)
    message(&quot;it&apos;s on!&quot;)
  else
    message(&quot;it&apos;s off!&quot;)
  end if
end on
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure that the script functions by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;. Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; followed by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&apos;s on!&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&apos;s off!&lt;/code&gt; appearing in the status bar / console at the bottom of the screen.&lt;/p&gt;

&lt;h3 id=&quot;step-one---buttons-and-more-buttons&quot;&gt;Step One - Buttons and More Buttons&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To begin, we will a series of buttons that interact with one another. First, let’s change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; button to be called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;. Modify your code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to on }
  declare ui_switch $run
  $run := 1

end on

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;it&apos;s on!&quot;)
  else
    message(&quot;it&apos;s off!&quot;)
  end if
end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that all references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; have been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;, effectively renaming this button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To ensure that your script is functioning, hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;. The code should function as it did prior.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, let’s add three other buttons as well. Modify your code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to on }
  declare ui_switch $run
  $run := 1

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

end on

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;it&apos;s on!&quot;)
  else
    message(&quot;it&apos;s off!&quot;)
  end if
end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s dissect this code a bit. Notice that a new button is added with the following code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{declare another button called $option1 that is tied to a button. The initial value is set to on}
declare ui_switch $option1
$option1 := 1
declare $option1Id
$option1Id := get_ui_id($option1)
set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that the first line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declare ui_switch $option1&lt;/code&gt; is the same code that created the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; button, simply changed to address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option1&lt;/code&gt;. Second, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option1 := 1&lt;/code&gt; sets the switch’s initial value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;. Next, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declare $option1Id&lt;/code&gt; declares a new variable that we will use to keep track of the unique ID that the compiler will use to keep track of this new switch. Every switch will have a unique ID assigned to it by the compiler. The line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\$option1Id := get_ui_id(\$option1)&lt;/code&gt; asks the compiler to tell us what the unique ID is for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option1&lt;/code&gt;. This value is stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option1Id&lt;/code&gt; variable so it can be used later. The final line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_control_par_str(\$option1Id, \$CONTROL_PAR_TEXT, &quot;A&quot;)&lt;/code&gt; simply tells the compiler what text should be displayed inside this switch. This code is repeated for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option3&lt;/code&gt;, changing the values accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Make sure your code functions by clicking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; button and testing out the buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-two---toggle-time&quot;&gt;Step Two - Toggle Time&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s possible to make the buttons react to one another. From this point forward in the tutorial, I will refer to each button by the text that appears within them. In this case, we want to make it so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; cannot be selected at the same time. For example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is selected, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; should automatically turn themselves to the off position. This can be accomplished through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control&lt;/code&gt; callback. Modify your code as follows. Specifically, notice the new callbacks added to the end of the code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to on }
  declare ui_switch $run
  $run := 1

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

end on

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;it&apos;s on!&quot;)
  else
    message(&quot;it&apos;s off!&quot;)
  end if
end on

{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

end on

{this runs when the ui_control called $option2 is changed}
on ui_control ($option2)

  $option2 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option3 := 0

end on

{this runs when the ui_control called $option3 is changed}
on ui_control ($option3)

  $option3 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option2 := 0

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice how applying the above code will result in only one of the three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; buttons being on at a time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So we can better understand what’s happening, let’s turn our attention to each of the new callbacks for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {this runs when the ui_control called $option1 is changed}
  on ui_control ($option1)

    $option1 := 1

    {toggle the other buttons off}
    $option2 := 0
    $option3 := 0

  end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;When the above code is executed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option1&lt;/code&gt; is set to the on position. Next, all the other buttons are set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or the off position. The same logic is employed with the other buttons.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-three---the-state-of-things&quot;&gt;Step Three - The State of Things&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Now, all of our buttons are in place for our first Kontakt instrument. We are almost to the point where our script can start doing things musically interesting. To prepare for musical magic, we have some final edits to complete.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First, let’s modify the initial value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$run&lt;/code&gt;. Up until this point, by default it has been set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; position. Modify your code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$run := 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice how where it was prior set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, we have changed it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, let’s create a new variable, a string, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@state&lt;/code&gt; in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; callback. We will use this string to keep track of which of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; buttons is set to the on position:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{set initial instrument state value}
declare @state
@state := &quot;A&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Third, in each of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control ($option)&lt;/code&gt; callbacks, we will add a line that sets the state for that callback. For example, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control ($option1)&lt;/code&gt; we will modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@state&lt;/code&gt; variable as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  @state := &quot;A&quot;

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fourth, let’s make it so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; button is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;off&lt;/code&gt; every time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; option is changed. In each of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control($option)&lt;/code&gt; callbacks, we will add another line that turns off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;. For example, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control ($option1)&lt;/code&gt; we will modify the code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  {reset the run button}
  $run := 0
  message(&quot;Ready to run&quot;)

  @state := &quot;A&quot;

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we will modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control($run)&lt;/code&gt; callback as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;Running &quot; &amp;amp; @state)
  else
    message(&quot;Ready to run&quot;)
  end if
end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; button is pressed, it places a message in the console that echos the state that is running, whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;. Otherwise, the console messages &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ready to run&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A measure of consistency, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message(&quot;Ready to run&quot;)&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; function such that there is always something displaying in the console. Notice how the console provides us important feedback as the programmer, such that we can understand what’s happening inside of our program. Your final code for this step should be the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to off }
  declare ui_switch $run
  $run := 0
  message(&quot;Ready to run&quot;)

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

  {set initial instrument state value}
  declare @state
  @state := &quot;A&quot;

end on

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;Running &quot; &amp;amp; @state)
  else
    message(&quot;Ready to run&quot;)
  end if
end on

{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  {reset the run button}
  $run := 0
  message(&quot;Ready to run&quot;)

  @state := &quot;A&quot;

end on

{this runs when the ui_control called $option2 is changed}
on ui_control ($option2)

  $option2 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option3 := 0

  {reset the run button}
  $run := 0
  message(&quot;Ready to run&quot;)

  @state := &quot;B&quot;

end on

{this runs when the ui_control called $option3 is changed}
on ui_control ($option3)

  $option3 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option2 := 0

  {reset the run button}
  $run := 0
  message(&quot;Ready to run&quot;)

  @state := &quot;C&quot;

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-four---your-first-function&quot;&gt;Step Four - Your First Function&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Functions are callbacks of your own design. Functions can be useful in executing blocks of code at will – especially those that are repeated throughout your code. Notice how a specific block of code tends to repeat over and over again:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$run := 0
message(&quot;Ready to run&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This code appears in no less than four places currently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s generally considered bad design to repeat the same code time and time again where a line of code could be employed in place of the repeats. Immediately after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; callback, after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end on&lt;/code&gt;, add the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{creates a function that resets the values of run}
function resetRun()

  $run := 0
  message(&quot;Ready to run&quot;)

end function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Further, in the three places in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on ui_control&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$option3&lt;/code&gt;, replace the two lines that reset the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$run&lt;/code&gt; variable and messages &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ready to run&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call resetRun()&lt;/code&gt;. Sadly, we cannot utilize such functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; – which makes me sad as a programmer. In the end, your final code should appear as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

  {set the basics of the UI, setting the height at 213 and width at 720}
  make_perfview
  set_ui_height_px(213)
  set_ui_width_px(633)

  {declare a variable called $run that is tied to a button. Set that button to off }
  declare ui_switch $run
  $run := 0
  message(&quot;Ready to run&quot;)

  {declare another button called $option1 that is tied to a button. The initial value is set to on}
  declare ui_switch $option1
  $option1 := 1
  declare $option1Id
  $option1Id := get_ui_id($option1)
  set_control_par_str($option1Id, $CONTROL_PAR_TEXT, &quot;A&quot;)

  {declare another button called $option2 that is tied to a button. The initial value is set to off}
  declare ui_switch $option2
  $option2 := 0
  declare $option2Id
  $option2Id := get_ui_id($option2)
  set_control_par_str($option2Id, $CONTROL_PAR_TEXT, &quot;B&quot;)

  {declare another button called $option3 that is tied to a button. The initial value is set to off}
  declare ui_switch $option3
  $option3 := 0
  declare $option3Id
  $option3Id := get_ui_id($option3)
  set_control_par_str($option3Id, $CONTROL_PAR_TEXT, &quot;C&quot;)

  {set initial instrument state value}
  declare @state
  @state := &quot;A&quot;

end on

{creates a function that resets the values of run}
function resetRun()

  $run := 0
  message(&quot;Ready to run&quot;)

end function

{this runs when the ui_control called $switch is changed}
on ui_control($run)

  if($run = 1)
    message(&quot;Running &quot; &amp;amp; @state)
  else
    message(&quot;Ready to run&quot;)
  end if
end on

{this runs when the ui_control called $option1 is changed}
on ui_control ($option1)

  $option1 := 1

  {toggle the other buttons off}
  $option2 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;A&quot;

end on

{this runs when the ui_control called $option2 is changed}
on ui_control ($option2)

  $option2 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option3 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;B&quot;

end on

{this runs when the ui_control called $option3 is changed}
on ui_control ($option3)

  $option3 := 1

  {toggle the other buttons off}
  $option1 := 0
  $option2 := 0

  {reset the run button}
  call resetRun()

  @state := &quot;C&quot;

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice how the function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resetRun&lt;/code&gt; must appear above those callbacks that utilize this function. Through the utilization of this function, we are &lt;em&gt;abstracting away&lt;/em&gt;, or simplifying, our code by taking a task that took six lines of code and reducing it down to a single line of code. Abstraction of this nature will become of particular importance as you develop as a KSP developer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h3&gt;

&lt;p&gt;You have now finalized the physical interface of your first Kontakt instrument. It could be tempting to get lured in by graphical interfaces, prototyping backgrounds and button layouts in specialized software. However, my recommendation is to keep things simple for the time being. Focus on function over aesthetics for a short while.&lt;/p&gt;

&lt;p&gt;The tutorial to follow will allow you to &lt;em&gt;finally&lt;/em&gt; produce something musically interesting.&lt;/p&gt;

&lt;p&gt;Copyright © 2022 THI. All rights reserved. gelvinwhite.com is operated by THI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Native Instruments®️ and Kontakt®️ are registered trademarks of Native Instruments GmbH. We have no affiliation with Native Instruments.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Create a Kontakt 7 Instrument (Part 2) - Push It!</title>
   <link href="gelvinwhite.com/kontakt/2022/10/01/how-to-create-a-kontakt-7-instrument-part-2/"/>
   <updated>2022-10-01T16:00:00-07:00</updated>
   <id>gelvinwhite.com/kontakt/2022/10/01/how-to-create-a-kontakt-7-instrument-part-2</id>
   <content type="html">&lt;p&gt;Welcome to the second installment of my multi-part series about how to engage in the beautiful pursuit of building your own instruments, effects, and plugins in the Kontakt Script Language.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial continues from the &lt;a href=&quot;https://gelvinwhite.com/kontakt/2022/09/30/how-to-create-a-kontakt-7-instrument/&quot;&gt;first installment&lt;/a&gt; of this multi-part series. So, if you have not followed the instructions there, best to backtrack and complete those steps. Further, this tutorial requires a full version of Kontakt. Likely, Kontakt 5 or later is fine. However, screenshots in this tutorial are of Kontakt 7.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Continuing from where we left off, please ensure that the following starter code is in place in the scripting window:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
on init

  message(&quot;Hello World!&quot;)

end on
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure that the script functions by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;. Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;, you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; appearing in the status bar / console at the bottom of the screen.&lt;/p&gt;

&lt;h3 id=&quot;step-one---creating-the-performance-view&quot;&gt;Step One - Creating the Performance View&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To begin, we will create the &lt;em&gt;performance view&lt;/em&gt; of the instrument. You can think of the performance view as the canvas upon which your buttons, dials, and other graphical elements will appear when someone is using the instrument. Modify your code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on init

  {set the basics of the UI, setting the height at 213 and width at 720}
	make_perfview
	set_ui_height_px(213)
	set_ui_width_px(633)

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_perfview&lt;/code&gt; informs the compiler that there is a user interface that needs to be rendered to the user, even when they are not in the script editor. Without this line of code, your user interface will not be visible. Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_ui_height_px&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_ui_width_px&lt;/code&gt; tell the compiler the size of the performance view.&lt;/p&gt;

    &lt;p&gt;Most important, notice the curly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; braces, which allows you to comment your code. Throughout your process of learning how to program, I highly advise keeping good notes about what your code does! After all, when you return later in a week, month, or year, it’s helpful to know what your code is doing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To ensure that your script is functioning, hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;. Then, click the wrench icon to switch to performance view. Your window should look like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-02-how-to-create-a-kontakt-7-instrument-part-2/001.png&quot; alt=&quot;kontakt wrench&quot; title=&quot;kontakt wrench&quot; /&gt;
Note that if your screen does not look like the above, you probably did not click that wrench.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-two---placing-your-first-button&quot;&gt;Step Two - Placing Your First Button&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next, let’s place your first button. Modify your code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on init

	{set the basics of the UI, setting the height at 213 and width at 720}
	make_perfview
	set_ui_height_px(213)
	set_ui_width_px(633)

	{declare a variable called $switch that is tied to a button. Set that switch to on }
	declare ui_switch $switch
	$switch := 1

	message(&quot;Hello World!&quot;)

end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declare&lt;/code&gt; command is used to create a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;. This variable has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; sign in front of it, which tells us that this variable is an integer. Further, this variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; is tied to a button, signified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui_switch&lt;/code&gt;. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$switch&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. When a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui_switch&lt;/code&gt; has a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; it is off. When it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; it is on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;, you should see the following:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-02-how-to-create-a-kontakt-7-instrument-part-2/002.png&quot; alt=&quot;kontakt switch&quot; title=&quot;kontakt switch&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on the button called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;. You’ll notice that in the &lt;em&gt;on&lt;/em&gt; position it is lighter in color. In the &lt;em&gt;off&lt;/em&gt; position, it is darker in color&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-three---making-the-button-interactive&quot;&gt;Step Three - Making the Button Interactive&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, it’s time to learn a little about &lt;em&gt;callbacks&lt;/em&gt;. A callback is a block of code that is executed at a specific time. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; callback is run each time the script is run. This callback is the first callback to be run, always. You can create multiple callbacks in your program. Modify your code as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{this always runs when the script starts}
on init

	{set the basics of the UI, setting the height at 213 and width at 720}
	make_perfview
	set_ui_height_px(213)
	set_ui_width_px(633)

	{declare a variable called $switch that is tied to a button. Set that switch to on }
	declare ui_switch $switch
	$switch := 1

end on

{this runs when the ui_control called $switch is changed}
on ui_control($switch)

  if($switch = 1)
    message(&quot;it&apos;s on!&quot;)
  else
    message(&quot;it&apos;s off!&quot;)
  end if
end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice that a new callback called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui_control($switch)&lt;/code&gt; is included. When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$switch1&lt;/code&gt; is manipulated, this callback is called. Notice that the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$switch1&lt;/code&gt; is passed to this callback using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; parentheses. Then, inside the callback, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement makes a decision. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$switch = 1&lt;/code&gt; or &lt;em&gt;on&lt;/em&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&apos;s on!&lt;/code&gt; is messaged in the console. Otherwise, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&apos;s off&lt;/code&gt; is messaged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click “Apply” and play with the button. Notice what is displayed in the console.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-02-how-to-create-a-kontakt-7-instrument-part-2/003.png&quot; alt=&quot;kontakt console&quot; title=&quot;kontakt console&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h3&gt;

&lt;p&gt;You have now created your first interactive button!&lt;/p&gt;

&lt;p&gt;The tutorial to follow will discuss the placement of buttons within the performance view.&lt;/p&gt;

&lt;p&gt;Copyright © 2022 THI. All rights reserved. gelvinwhite.com is operated by THI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Native Instruments®️ and Kontakt®️ are registered trademarks of Native Instruments GmbH. We have no affiliation with Native Instruments.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Create a Kontakt 7 Instrument (Part 1) - Hello World!</title>
   <link href="gelvinwhite.com/kontakt/2022/09/30/how-to-create-a-kontakt-7-instrument/"/>
   <updated>2022-09-30T16:00:00-07:00</updated>
   <id>gelvinwhite.com/kontakt/2022/09/30/how-to-create-a-kontakt-7-instrument</id>
   <content type="html">&lt;p&gt;Welcome to the beautiful pursuit of building your own instruments, effects, and plugins in the Kontakt Script Processor (KSP).&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial requires a full version of Kontakt. Likely, Kontakt 5 or later is fine. However, screenshots in this tutorial are of Kontakt 7.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The Kontakt Script Processor language is a well-documented programming language with a thriving community behind it. As you get started, I recommend getting your hands on the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Obtain the &lt;a href=&quot;https://www.native-instruments.com/forum/attachments/kontakt-script-language-pdf.86897/&quot;&gt;Kontakt Script Language&lt;/a&gt; development document. Ignore the age of this document or any references to Kontakt version numbers. It is masterfully written document that is exceedingly applicable today. This document provides a narrative introduction to the scripting language.&lt;/li&gt;
  &lt;li&gt;Obtain the &lt;a href=&quot;https://www.native-instruments.com/fileadmin/ni_media/downloads/manuals/kontakt/KONTAKT_602_KSP_Reference_Manual.pdf&quot;&gt;KSP Reference Manual&lt;/a&gt;. As of time of this writing, the KSP Reference Manual discusses Kontakt 6. This is not a problem!&lt;/li&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://www.native-instruments.com/en/community/&quot;&gt;Native Instruments Community&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://discord.com/invite/rTpCcpg&quot;&gt;NI Kontakt Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-one---find-the-scripting-environment&quot;&gt;Step One - Find the Scripting Environment.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open your full version of Kontakt. Likely, you will see a screen like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/001.png&quot; alt=&quot;kontakt splash screen with many libraries&quot; title=&quot;kontakt splash screen&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, click the file icon and then select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New instrument&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/002.png&quot; alt=&quot;kontakt splash screen with menu open creating new instrument&quot; title=&quot;kontakt new instrument&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, click the wrench &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit mode&lt;/code&gt; icon.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/003.png&quot; alt=&quot;kontakt interface with the wrench&quot; title=&quot;kontakt edit mode&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Script Editor&lt;/code&gt; button.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/004.png&quot; alt=&quot;kontakt opening script editor&quot; title=&quot;kontakt opening script editor&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit&lt;/code&gt; button.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/005.png&quot; alt=&quot;kontakt edit button&quot; title=&quot;kontakt edit button&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are now in the Script Editor. Congrats!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/006.png&quot; alt=&quot;kontakt script editor&quot; title=&quot;kontakt script editor&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-two---hello-world&quot;&gt;Step Two - Hello World!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Copy and paste the following code into the Script Editor window.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  on init

  	message(&quot;Hello World!&quot;)

  end on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upon clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;, you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; appearing in the status bar / console at the bottom of the screen.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-10-01-how-to-create-a-kontakt-7-instrument/007.png&quot; alt=&quot;kontakt hello world&quot; title=&quot;kontakt hello world&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-three---analyzing-the-script&quot;&gt;Step Three - Analyzing the Script&lt;/h3&gt;

&lt;p&gt;The block of code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on init&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end on&lt;/code&gt; is always run first by the script compiler. Anything that you put in this block of code will run!&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message(&quot;Hello World!&quot;)&lt;/code&gt; statement tells the compiler to output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; into the console. You can change this message within the quotes to say anything you like. In future projects, you will find it exceptionally useful to be able to output to the console – such that you can provide yourself clues about what is happening in your code. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; function will be an invaluable tool you will use in the future to catch and understand bugs in your script.&lt;/p&gt;

&lt;h3 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h3&gt;

&lt;p&gt;You have now created your first Kontakt script!&lt;/p&gt;

&lt;p&gt;The tutorial to follow will discuss adding buttons to your interface.&lt;/p&gt;

&lt;p&gt;Copyright © 2022 THI. All rights reserved. gelvinwhite.com is operated by THI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Native Instruments®️ and Kontakt®️ are registered trademarks of Native Instruments GmbH. We have no affiliation with Native Instruments.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
